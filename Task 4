from pyspark.sql import SparkSession
from pyspark.sql.functions import col, udf
from pyspark.sql.types import StringType
from pyspark.ml.feature import Tokenizer, StopWordsRemover, CountVectorizer, IDF, StringIndexer
from pyspark.ml.classification import NaiveBayes
from pyspark.ml.evaluation import MulticlassClassificationEvaluator

spark = SparkSession.builder.appName("SentimentAnalysis").getOrCreate()

df = spark.read.csv("tweets_reviews.csv", header=True, inferSchema=True)

def clean_text(text):
    import re
    text = text.lower()
    text = re.sub(r'http\S+', '', text)
    text = re.sub(r'[^a-z\s]', '', text)
    return text

clean_udf = udf(clean_text, StringType())
df = df.withColumn("cleaned_text", clean_udf(col("text")))

tokenizer = Tokenizer(inputCol="cleaned_text", outputCol="words")
df = tokenizer.transform(df)

remover = StopWordsRemover(inputCol="words", outputCol="filtered_words")
df = remover.transform(df)

cv = CountVectorizer(inputCol="filtered_words", outputCol="raw_features", vocabSize=5000)
cv_model = cv.fit(df)
df = cv_model.transform(df)

idf = IDF(inputCol="raw_features", outputCol="features")
idf_model = idf.fit(df)
df = idf_model.transform(df)

indexer = StringIndexer(inputCol="sentiment", outputCol="label")
df = indexer.fit(df).transform(df)

train_df, test_df = df.randomSplit([0.8, 0.2], seed=42)

nb = NaiveBayes(featuresCol="features", labelCol="label", modelType="multinomial")
model = nb.fit(train_df)

predictions = model.transform(test_df)
predictions.select("text", "sentiment", "prediction").show(5)

evaluator = MulticlassClassificationEvaluator(labelCol="label", predictionCol="prediction", metricName="accuracy")
accuracy = evaluator.evaluate(predictions)
print("Accuracy:", accuracy)
